package com.system.service.wor;

import com.github.pagehelper.PageInfo;
import com.system.entity.TSubjectBank;
import com.system.entity.TSubjectOption;
import com.system.exception.RspException;
import com.system.mapper.TSubjectBankMapper;
import com.system.pojo.wor.SubBankInUser;
import com.system.pojo.wor.SubInOpts;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import utils.ReqPage;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class WorServiceImpl implements WorService {

    @Autowired
    private TSubjectBankMapper tSubjectBankMapper;

    @Override
    public PageInfo<SubBankInUser> list(ReqPage.QReqPage page, Integer subjectMode, Integer subjectDifficulty) {
        PageInfo<SubBankInUser> pageInfo = new PageInfo<>(tSubjectBankMapper.list(page.getOffset(), page.getLimit(), page.getKeyWord(), subjectMode, subjectDifficulty));
        pageInfo.setPageNum(page.getPageNum());
        pageInfo.setPageSize(page.getLimit());
        pageInfo.setTotal(tSubjectBankMapper.listCount(page.getOffset(), page.getLimit(), page.getKeyWord(), subjectMode, subjectDifficulty));
        return pageInfo;
    }

    @Override
    public List<TSubjectOption> findOptsBySId(int subjectId) {
        return tSubjectBankMapper.findOptsBySId(subjectId);
    }

    @Override
    @Transactional
    public String savesOrOpts(List<SubInOpts> subInOpts) {
        if (subInOpts == null || subInOpts.size() == 0) {
            new RspException("参数错误！");
        }
        List<TSubjectBank> subs = subInOpts.stream()
                .map(x -> {
                    TSubjectBank sb = new TSubjectBank();
                    sb.setSubjectAnalysis(x.getSubjectAnalysis());
                    sb.setSubjectContent(x.getSubjectContent());
                    sb.setSubjectCreater(x.getSubjectCreater());
                    sb.setSubjectCreatetime(x.getSubjectCreatetime());
                    sb.setSubjectId(x.getSubjectId());
                    sb.setSubjectUrl(x.getSubjectUrl());
                    sb.setSubjectMode(x.getSubjectMode());
                    sb.setSubjectDifficulty(x.getSubjectDifficulty());
                    sb.setSubjectStatus(x.getSubjectStatus());
                    sb.setSunjectType(x.getSunjectType());
                    return x;
                }).collect(Collectors.toList());

        if (subs.size() != tSubjectBankMapper.saveSubs(subs))
            throw new RspException("试题保存失败！");

        List<TSubjectOption> opts = subInOpts.stream()
                .map(x -> x.gettSubjectOptions())
                .flatMap(x -> x.stream())
                .collect(Collectors.toList());


        if (subs.size() != tSubjectBankMapper.saveOpts(opts))
            throw new RspException("试题选项保存失败！");

        return null;
    }

}
