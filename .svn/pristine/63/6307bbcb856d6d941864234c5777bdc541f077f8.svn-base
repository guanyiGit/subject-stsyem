package com.system.service.examination.impl;

import com.system.entity.TExaminations;
import com.system.entity.TRecord;
import com.system.mapper.TExaminationsMapper;
import com.system.mapper.TRecordMapper;
import com.system.pojo.examination.ExaminationVo;
import com.system.service.examination.ExaminationService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.system.utils.ReqPage;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @author pengyu
 * @Date 2019/6/20
 * @Description
 */
@Service
public class ExaminationServiceImpl implements ExaminationService {

    @Autowired
    private TExaminationsMapper examinationsMapper;

    @Autowired
    private TRecordMapper recordMapper;

    @Override
    public List<ExaminationVo> getExaminations(ReqPage reqPage, Integer examineeId) throws Exception{
        List<TExaminations> examinations = examinationsMapper.findExaminations(reqPage);
        List<ExaminationVo> examinationVos = new ArrayList<>();
        if(examinations == null || examinations.size() ==0){
            return examinationVos;
        }
        examinations.stream().forEach( item ->{
            ExaminationVo examinationVo = new ExaminationVo();
            BeanUtils.copyProperties(item,examinationVo);
            examinationVo.setCanJoin(false);

            //当前时间是否在生效时间之后
            boolean isAfter = new Date().after(item.getEffectDate());

            boolean isBefore = true;
            if (item.getFailureDate() != null){
                //当前时间是否在失效时间之前
                 isBefore = new Date().before(item.getFailureDate());
            }

            if (item.getExamStatus() == 1){
                if ( isAfter && isBefore ){
                    List<TRecord> records = recordMapper.findByExamineeIdAndExamId(examineeId, item.getExamId());
                    Integer recordsCount = 0;
                    if (records != null && records.size()>0){
                        recordsCount = records.size();
                    }
                    //答题次数等于0或者答题记录小于答题次数，可以继续答题
                    if ( item.getAnswersNumber() == 0 || recordsCount < item.getAnswersNumber()){
                        examinationVo.setCanJoin(true);
                    }
                }
            }
            examinationVos.add(examinationVo);
        });
        return examinationVos;
    }


    @Override
    public TExaminations getExaminations(Integer examId) throws Exception {
        TExaminations examinations = examinationsMapper.selectByPrimaryKey(examId);
        return examinations;
    }
}
