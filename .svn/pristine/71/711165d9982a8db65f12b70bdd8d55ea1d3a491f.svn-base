package com.system.service.user.impl;

import com.system.VO.UpdateUserStatusVO;
import com.system.VO.UserVO;
import com.system.entity.TRole;
import com.system.entity.TUser;
import com.system.entity.TUserRefRole;
import com.system.mapper.TUserMapper;
import com.system.mapper.TUserRefRoleMapper;
import com.system.service.user.UserService;
import com.system.utils.MD5Utils;
import com.system.utils.R;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private TUserMapper userMapper;

    @Autowired
    private TUserRefRoleMapper userRefRoleMapper;


    @Override
    public Map<String, Object> findUserList(Integer pageNum, Integer pageSize, Integer role, String searchKey) {
        Map<String,Object>map=new HashMap<>();
        Integer index=(pageNum-1)*pageSize;
        map.put("role",role);
        map.put("searchKey",searchKey);
        //总数
        Integer total=userMapper.countUser(map);
        map.put("index",index);
        map.put("pageSize",pageSize);
        //列表
        List<UserVO> list= userMapper.findUserList(map);

        map.put("list",list);
        map.put("total",total);
        return map;
    }

    @Override
    @Transactional
    public int insert(UserVO user) {
        user.setCreateTime(new Date());
        user.setStatus(0);
        //根据电话号码查找用户
        int a=userMapper.selectUserByPhone(user.getPhone());
        if(a>0){
            return -1;
        }
        user.setPassword(MD5Utils.encrypt(user.getUsername(),user.getPassword()));
         userMapper.insertSelective(user);
        TUserRefRole refRole=new TUserRefRole();
            refRole.setRoleId(user.getRoleId());
            refRole.setCreateTime(new Date());
            refRole.setUserId(user.getUserId());
        int i =userRefRoleMapper.insertSelective(refRole);
        return i;
    }

    @Override
    public int update(TUser user) {
        int i = userMapper.updateByPrimaryKeySelective(user);
        return i;
    }


    @Override
    public UserVO detail(Integer id) {
        UserVO vo=  userMapper.detail(id);
        return vo;
    }

    @Override
    public List<TRole> findRoleList() {
        return userMapper.findRoleList();
    }

    /**
     * 修改用户状态
     */
    @Override
    public int updateStatus(UpdateUserStatusVO vo) {
//        Map<String,Object>map=new HashMap<>();
//        map.put("vo",vo);
      int i=  userMapper.updateStatus(vo);
        return i;
    }

    @Override
    public R login(String name, String password) {
        if(name!=null&&!name.equals("")&&password!=null&&!password.equals("")){
            TUser tUser=userMapper.login(name);
            if(tUser==null){
                return R.error(500,"没有该用户");
            }else if(!tUser.getPassword().equals(password)){
                return R.error(500,"密码错误");
            }else {
                return R.ok(tUser);
            }
        }
        return R.error(500,"用户名密码不能为空");
    }
}
